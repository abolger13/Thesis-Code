# -*- coding: utf-8 -*-
"""Joining_Weather_Flights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V4GNnNsJleKn-DfWQ6shudayrq4rq2vO
"""

from google.colab import drive
import os
import pandas as pd
import pandas as pd
from sklearn.preprocessing import LabelEncoder

#Script to merge Dublin Airport flight data with corresponding METAR weather observations.
#Steps:
#1. Load and time-align flight and weather data using merge_asof.
#2. Perform feature engineering (hour, weekday).
#3. Label encode categorical columns.
#4. Save final dataset ready for ML.

drive.mount('/content/drive')
#connecting to the google drive

os.chdir('/content/drive/MyDrive/Final Year Project/Data/Joined Datasets')
!pwd
#make sure operating in correct directory

weather = pd.read_csv('sorted_output.csv')
flights = pd.read_csv('Flight_to_ml.csv')
weather.head()# import the weather and the flights dataset seperately and display them to make sure they right

flights.head() # display the flights dataset

# Convert datetime columns to proper format with UTC timezone in both datasets
flights['Scheduled Departure'] = pd.to_datetime(flights['Scheduled Departure'], utc=True)
weather['Observation Time'] = pd.to_datetime(weather['Observation Time'], utc=True)

# Merge using nearest timestamp matching
merged_df = pd.merge_asof(
    flights.sort_values("Scheduled Departure"),  # Ensure flight data is sorted
    weather.sort_values("Observation Time"),  # Ensure weather data is sorted
    left_on="Scheduled Departure",  # Flight departure times
    right_on="Observation Time",  # Weather observation times
    direction="backward"  # Assign closest past weather reading
)



print("Merging complete! The final dataset is saved as 'final_ml_dataset.csv'.")

merged_df.head() # display the completed dataset

file_save = 'test.csv' # Save a test version of the merged dataset
merged_df.to_csv(file_save, index=False)

"""# Getting full ready for machine learning"""

# Load the full dataset
ml_df = pd.read_csv("test.csv")

# Convert datetime columns to proper format to make sure
ml_df['Scheduled Departure'] = pd.to_datetime(ml_df['Scheduled Departure'], utc=True)

# Extract hour and day of the week for better ML performance to individual columns
ml_df['hour_of_day'] = ml_df['Scheduled Departure'].dt.hour
ml_df['day_of_week'] = ml_df['Scheduled Departure'].dt.dayofweek

# Drop unnecessary columns that are not useful for ML
ml_df.drop(columns=['Date', 'Scheduled Departure', 'Estimated Departure', 'Actual Departure',
                    'Scheduled Arrival', 'Estimated Arrival', 'Actual Arrival',
                    'departure_time', 'departure_date', 'Observation Time', 'Station', 'Flight Duration', 'Departure Delay'], inplace=True)

# Identify categorical columns in the full dataset
categorical_columns = ['Flight Number', 'Airline', 'Aircraft Model', 'Departure Airport',
                       'Departure Gate', 'Arrival Airport']

# Apply Label Encoding for categorical columns so they can be used for ML
label_encoders = {}
for col in categorical_columns:
    le = LabelEncoder()
    ml_df[col] = le.fit_transform(ml_df[col])  # Convert categories to numbers
    label_encoders[col] = le  # Store encoder for future use

#save the final dataset ready for ML now
ml_df.to_csv("final_ml_ready_dataset.csv", index=False)

print("Dataset is now fully prepared for machine learning! Saved as 'final_ml_ready_dataset.csv'.")