# -*- coding: utf-8 -*-
"""METAR_Data_Collection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iiin8i8_QFn4gZtn2uyoJy0xs6NzC3gw
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import os
import requests
from bs4 import BeautifulSoup
import numpy as np
from metar import Metar
from google.colab import drive
# All the libraries needed for this part of the thesis

pip install metar
# crucial for the parsing to turn into usable values for analysis

#Script for scraping and processing METAR weather data for Dublin Airport (EIDW) from Ogimet.
#Steps:
#1. Scrape monthly METAR data from URLs.
#2. Parse data using the `metar` library.
#3. Calculate additional metrics (e.g. humidity).
#4. Save monthly and combine into one ordered file.
#5. Basic exploratory analysis.

"""# Data retrieval stage"""

drive.mount('/content/drive')

os.chdir('/content/drive/MyDrive/Final Year Project/Data/Joined Datasets')
!pwd

"""from https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=REV&nil=SI&fmt=html&ano=2025&mes=02&day=09&hora=14&anof=2025&mesf=02&dayf=10&horaf=14&minf=59&send=send using data scraping

# DATA SCRAPING the weather data for each month

## This process was repeated 12 times once for each month and stored in individual csv file after being parsed using METAR
"""

# EXAMPLE URL to access the wether data will put other url in a comment below
url = "https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2025&mes=01&day=01&hora=00&anof=2025&mesf=01&dayf=31&horaf=23&minf=59&send=send"
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
}

# Make the request with headers
response = requests.get(url, headers=headers)

# Parse the pages content
soup = BeautifulSoup(response.text, 'html.parser')

# Extract METAR strings from all of the <pre> tags
metar_strings = [td.get_text().strip() for td in soup.find_all('pre')]

# Verify scraped METAR values by the count and the display of first 5
print(f"Total METARs found: {len(metar_strings)}")
print("First few METARs:", metar_strings[:5])

"""\ March 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=REV&nil=SI&fmt=html&ano=2024&mes=03&day=01&hora=00&anof=2024&mesf=03&dayf=31&horaf=23&minf=59&send=send,

April 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=04&day=01&hora=00&anof=2024&mesf=04&dayf=30&horaf=23&minf=59&send=send,

May 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=05&day=01&hora=00&anof=2024&mesf=05&dayf=31&horaf=23&minf=59&send=send,

June 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=06&day=01&hora=00&anof=2024&mesf=06&dayf=30&horaf=23&minf=59&send=send,

July 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=07&day=01&hora=00&anof=2024&mesf=07&dayf=31&horaf=23&minf=59&send=send,

August 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=08&day=01&hora=00&anof=2024&mesf=08&dayf=31&horaf=23&minf=59&send=send,

September 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=09&day=01&hora=00&anof=2024&mesf=09&dayf=30&horaf=23&minf=59&send=send,

October 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=10&day=01&hora=00&anof=2024&mesf=10&dayf=31&horaf=23&minf=59&send=send,

November 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=11&day=01&hora=00&anof=2024&mesf=11&dayf=30&horaf=23&minf=59&send=send,

December 2024 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=12&day=01&hora=00&anof=2024&mesf=12&dayf=31&horaf=23&minf=59&send=send

January 2025 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2025&mes=01&day=01&hora=00&anof=2025&mesf=01&dayf=31&horaf=23&minf=59&send=send

February 2025 - https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=REV&nil=SI&fmt=html&ano=2025&mes=02&day=01&hora=00&anof=2025&mesf=02&dayf=28&horaf=23&minf=59&send=send

This is the list of the links to the weather data each parsed individually
"""

# humidity function
def calculate_humidity(temp, dew_point):
    if temp == "N/A" or dew_point == "N/A":
        return "N/A"
    return round(100 * (np.exp((17.625 * dew_point) / (243.04 + dew_point)) / np.exp((17.625 * temp) / (243.04 + temp))), 2)
# The values are from Magnus-Tetens approximation used to calculate the relative humidity.

data = []

# runs a loop for every string stored the scraping and parses it into the respective values below
for metar_string in metar_strings:
    try:
        metar = Metar.Metar(metar_string)  # Parse METAR data

# Ensuring date-time formatting correctly
        observation_time = metar.time.replace(tzinfo=None).strftime('%Y-%m-%d %H:%M:%S') if metar.time else "N/A"

        data.append({
            "Station": metar.station_id,
            "Observation Time": observation_time,
            "Wind Speed (KT)": metar.wind_speed.value("KT") if metar.wind_speed else "N/A",
            "Visibility (m)": metar.vis.value("m") if metar.vis else "N/A",
            "Temperature (C)": metar.temp.value("C") if metar.temp else "N/A",
            "Dew Point (C)": metar.dewpt.value("C") if metar.dewpt else "N/A",
            "Pressure (hPa)": metar.press.value("hPa") if metar.press else "N/A",
            "Humidity (%)": calculate_humidity(metar.temp.value("C"), metar.dewpt.value("C")) if metar.temp and metar.dewpt else "N/A",
        })
    except Exception as e:
        print("Error parsing METAR:", e)

# Converted METAR data to DataFrame
df = pd.DataFrame(data)

# Making sure Observation Time column is treated as datetime format
df["Observation Time"] = pd.to_datetime(df["Observation Time"], errors='coerce')

# stores into the respective month that is being done at the time
df.to_csv("January_Metar.csv", index=False)

# Display first few rows to verify
print(df.head())

"""# If want to join all at the same time"""

# Function to calculate relative humidity
def calculate_humidity(temp, dew_point):
    if temp == "N/A" or dew_point == "N/A":
        return "N/A"
    return round(100 * (np.exp((17.625 * dew_point) / (243.04 + dew_point)) /
                        np.exp((17.625 * temp) / (243.04 + temp))), 2)

# List of URLs to scrape METAR data from
urls = ["https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=SA&ord=DIR&nil=SI&fmt=html&ano=2024&mes=01&day=01&hora=00&anof=2024&mesf=01&dayf=31&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=SA&ord=DIR&nil=SI&fmt=html&ano=2024&mes=02&day=01&hora=00&anof=2024&mesf=02&dayf=29&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=REV&nil=SI&fmt=html&ano=2024&mes=03&day=01&hora=00&anof=2024&mesf=03&dayf=31&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=04&day=01&hora=00&anof=2024&mesf=04&dayf=30&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=05&day=01&hora=00&anof=2024&mesf=05&dayf=31&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=06&day=01&hora=00&anof=2024&mesf=06&dayf=30&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=07&day=01&hora=00&anof=2024&mesf=07&dayf=31&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=08&day=01&hora=00&anof=2024&mesf=08&dayf=31&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=09&day=01&hora=00&anof=2024&mesf=09&dayf=30&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=10&day=01&hora=00&anof=2024&mesf=10&dayf=31&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=11&day=01&hora=00&anof=2024&mesf=11&dayf=30&horaf=23&minf=59&send=send",
"https://www.ogimet.com/display_metars2.php?lang=en&lugar=EIDW&tipo=ALL&ord=DIR&nil=SI&fmt=html&ano=2024&mes=12&day=01&hora=00&anof=2024&mesf=12&dayf=31&horaf=23&minf=59&send=send"
]

data = []  # Store parsed METAR data

for url in urls:
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Extract METAR strings from <pre> tags
    metar_strings = [pre.get_text().strip() for pre in soup.find_all('pre')]

    for metar_string in metar_strings:
        try:
            metar = Metar.Metar(metar_string)  # Parse METAR data
            temp_c = metar.temp.value("C") if metar.temp else "N/A"
            dew_c = metar.dewpt.value("C") if metar.dewpt else "N/A"

            data.append({
                "Station": metar.station_id,
                "Observation Time": metar.time.strftime('%Y-%m-%d %H:%M:%S') if metar.time else "N/A",
                "Wind Speed (KT)": metar.wind_speed.value("KT") if metar.wind_speed else "N/A",
                "Visibility (m)": metar.vis.value("m") if metar.vis else "N/A",
                "Temperature (C)": temp_c,
                "Dew Point (C)": dew_c,
                "Humidity (%)": calculate_humidity(temp_c, dew_c),
                "Pressure (hPa)": metar.press.value("hPa") if metar.press else "N/A",
            })
        except Exception as e:
            print("Error parsing METAR:", e)

# Convert to DataFrame and append to CSV
df = pd.DataFrame(data)
df.to_csv("metar_data.csv", mode='a', index=False, header=not pd.io.common.file_exists("metar_data.csv"))

print("CSV file updated successfully with new METAR data!")

"""JOINING THE 12 DATASETS TOGETHER AND ORDERING THEM BY DATE AND TIME"""

# Opens the folder that contains all 12 months worth of weather values
folder_path = "/content/drive/MyDrive/Final Year Project/Data/weather data"

# Get all CSV files in the folder
csv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]

# Read and concatenate all CSVs
df_list = [pd.read_csv(os.path.join(folder_path, file)) for file in csv_files]
#join all the csv files in the folder - the weather data is the only ones in there
merged_df = pd.concat(df_list, ignore_index=True)

# merged file saved
merged_df.to_csv("/content/drive/MyDrive/Final Year Project/Data/merged_output.csv", index=False)


print("All files have been merged successfully!")

# merged CSV file
df = pd.read_csv("merged_output.csv")

# Convert the 'Observation Time' column to datetime format to make sure it is
df['Observation Time'] = pd.to_datetime(df['Observation Time'], dayfirst=True, errors='coerce')

# Sort by date and time satrting with the older value moving more recent as you go down
df = df.sort_values(by='Observation Time')

# sorted file
df.to_csv("/content/drive/MyDrive/Final Year Project/Data/sorted_output.csv", index=False)

print("File sorted successfully!")

"""# EDA OF THE WEATHER DATA SET BY ITSELF

## Test for Null values and perfrom basic analysis of the completed data set
"""

df = pd.read_csv("sorted_output.csv")# inspect the final weather data set

df.describe()

df.info()

df.isnull().sum()

null_rows = df[df.isnull().any(axis=1)]
print(null_rows)

# Get the index of the rows with null values
null_indices = null_rows.index
print("Indices of rows with null values:", null_indices)

df = df.drop(null_indices)

"""REMOVING THE NULL ROW IN THE DATASET ONLY ONE VALUE"""

df['Temperature (C)'].hist(bins=30)
plt.title("Temperature Distribution")
plt.show()

df['Observation Time'] = pd.to_datetime(df['Observation Time'])
df.set_index('Observation Time', inplace=True)
df['Temperature (C)'].plot()
plt.title("Temperature Over Time")
plt.show()

corr = df.drop('Station', axis=1).corr()

sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()