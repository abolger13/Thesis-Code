# -*- coding: utf-8 -*-
"""REST_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZfLILHYcjycmv2ddKjuKXSHswppVx1Ez

# FLIGHT DATA COLLECTION
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive/Final Year Project/Data')
!pwd

pip install requests

"""## This process below is repeated for all months from March 2024 until February 2025"""

#This script collects flight data from the AviationStack API for all flights
#departing Dublin Airport (IATA: DUB) throughout March 2024. It writes the results
#to a CSV file ('flights_data_March_100.csv') with key flight, airline, and
#timestamp data.

# The retrieval methods are described on the first extraction

import requests
import csv

# API details
base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"   # Unique access key to authenticate with the API

# Dates to fetch flights for from March 2024
dates = ["2024-03-01","2024-03-02","2024-03-03","2024-03-04","2024-03-05","2024-03-06","2024-03-07","2024-03-08","2024-03-09","2024-03-10","2024-03-11","2024-03-12","2024-03-13",
         "2024-03-14","2024-03-15","2024-03-16","2024-03-17","2024-03-18","2024-03-19","2024-03-20","2024-03-21","2024-03-22","2024-03-23","2024-03-24",
         "2024-03-25","2024-03-26","2024-03-27","2024-03-28","2024-03-29","2024-03-30", "2024-03-31"]

# Output file name
output_file = "flights_data_March_100.csv"

# function to handle missing or nested values in the new dataset
def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

# Define the headers for CSV file
headers = [
    "Flight Number", "Airline", "Aircraft Model", "Registration",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

# Open the CSV file for writing
with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers) # Write a header row including the date for reference

    # Looping each date and fetching flights
    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',  #Only flights departing from Dublin Airport
            'limit': 100,  # Fetch 100 flights per day
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []): # looping through the flight info
                row = [
                    safe_get(flight.get('flight'), 'iata'), # Extract key flight-level details from the API response
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                # Write the flight data to the CSV file, prepending the specific date
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""THIS IS FLIGHTS FOR APRIL 2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-04-01", "2024-04-02", "2024-04-03", "2024-04-04", "2024-04-05",
    "2024-04-06", "2024-04-07", "2024-04-08", "2024-04-09", "2024-04-10",
    "2024-04-11", "2024-04-12", "2024-04-13", "2024-04-14", "2024-04-15",
    "2024-04-16", "2024-04-17", "2024-04-18", "2024-04-19", "2024-04-20",
    "2024-04-21", "2024-04-22", "2024-04-23", "2024-04-24", "2024-04-25",
    "2024-04-26", "2024-04-27", "2024-04-28", "2024-04-29", "2024-04-30"
]

output_file = "flights_data_April_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""THIS IS FLIGHTS FOR MAY 2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-05-01", "2024-05-02", "2024-05-03", "2024-05-04", "2024-05-05",
    "2024-05-06", "2024-05-07", "2024-05-08", "2024-05-09", "2024-05-10",
    "2024-05-11", "2024-05-12", "2024-05-13", "2024-05-14", "2024-05-15",
    "2024-05-16", "2024-05-17", "2024-05-18", "2024-05-19", "2024-05-20",
    "2024-05-21", "2024-05-22", "2024-05-23", "2024-05-24", "2024-05-25",
    "2024-05-26", "2024-05-27", "2024-05-28", "2024-05-29", "2024-05-30",
    "2024-05-31"
]

output_file = "flights_data_May_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""THIS IS FOR JUNE 2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-06-01", "2024-06-02", "2024-06-03", "2024-06-04", "2024-06-05",
    "2024-06-06", "2024-06-07", "2024-06-08", "2024-06-09", "2024-06-10",
    "2024-06-11", "2024-06-12", "2024-06-13", "2024-06-14", "2024-06-15",
    "2024-06-16", "2024-06-17", "2024-06-18", "2024-06-19", "2024-06-20",
    "2024-06-21", "2024-06-22", "2024-06-23", "2024-06-24", "2024-06-25",
    "2024-06-26", "2024-06-27", "2024-06-28", "2024-06-29", "2024-06-30"
]

output_file = "flights_data_June_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""THIS IS FOR JULY 2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-07-01", "2024-07-02", "2024-07-03", "2024-07-04", "2024-07-05",
    "2024-07-06", "2024-07-07", "2024-07-08", "2024-07-09", "2024-07-10",
    "2024-07-11", "2024-07-12", "2024-07-13", "2024-07-14", "2024-07-15",
    "2024-07-16", "2024-07-17", "2024-07-18", "2024-07-19", "2024-07-20",
    "2024-07-21", "2024-07-22", "2024-07-23", "2024-07-24", "2024-07-25",
    "2024-07-26", "2024-07-27", "2024-07-28", "2024-07-29", "2024-07-30",
    "2024-07-31"
]

output_file = "flights_data_July_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-08-01", "2024-08-02", "2024-08-03", "2024-08-04", "2024-08-05",
    "2024-08-06", "2024-08-07", "2024-08-08", "2024-08-09", "2024-08-10",
    "2024-08-11", "2024-08-12", "2024-08-13", "2024-08-14", "2024-08-15",
    "2024-08-16", "2024-08-17", "2024-08-18", "2024-08-19", "2024-08-20",
    "2024-08-21", "2024-08-22", "2024-08-23", "2024-08-24", "2024-08-25",
    "2024-08-26", "2024-08-27", "2024-08-28", "2024-08-29", "2024-08-30",
    "2024-08-31"
]

output_file = "flights_data_August_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""THIS IS FOR SEPTEMBER 2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-09-01", "2024-09-02", "2024-09-03", "2024-09-04", "2024-09-05",
    "2024-09-06", "2024-09-07", "2024-09-08", "2024-09-09", "2024-09-10",
    "2024-09-11", "2024-09-12", "2024-09-13", "2024-09-14", "2024-09-15",
    "2024-09-16", "2024-09-17", "2024-09-18", "2024-09-19", "2024-09-20",
    "2024-09-21", "2024-09-22", "2024-09-23", "2024-09-24", "2024-09-25",
    "2024-09-26", "2024-09-27", "2024-09-28", "2024-09-29", "2024-09-30"
]

output_file = "flights_data_September_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-10-01", "2024-10-02", "2024-10-03", "2024-10-04", "2024-10-05",
    "2024-10-06", "2024-10-07", "2024-10-08", "2024-10-09", "2024-10-10",
    "2024-10-11", "2024-10-12", "2024-10-13", "2024-10-14", "2024-10-15",
    "2024-10-16", "2024-10-17", "2024-10-18", "2024-10-19", "2024-10-20",
    "2024-10-21", "2024-10-22", "2024-10-23", "2024-10-24", "2024-10-25",
    "2024-10-26", "2024-10-27", "2024-10-28", "2024-10-29", "2024-10-30",
    "2024-10-31"
]

output_file = "flights_data_October_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""THIS IS FOR NOVEMBER "2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-11-01", "2024-11-02", "2024-11-03", "2024-11-04", "2024-11-05",
    "2024-11-06", "2024-11-07", "2024-11-08", "2024-11-09", "2024-11-10",
    "2024-11-11", "2024-11-12", "2024-11-13", "2024-11-14", "2024-11-15",
    "2024-11-16", "2024-11-17", "2024-11-18", "2024-11-19", "2024-11-20",
    "2024-11-21", "2024-11-22", "2024-11-23", "2024-11-24", "2024-11-25",
    "2024-11-26", "2024-11-27", "2024-11-28", "2024-11-29", "2024-11-30"
]

output_file = "flights_data_November_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""This is for December 2024"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2024-12-01", "2024-12-02", "2024-12-03", "2024-12-04", "2024-12-05",
    "2024-12-06", "2024-12-07", "2024-12-08", "2024-12-09", "2024-12-10",
    "2024-12-11", "2024-12-12", "2024-12-13", "2024-12-14", "2024-12-15",
    "2024-12-16", "2024-12-17", "2024-12-18", "2024-12-19", "2024-12-20",
    "2024-12-21", "2024-12-22", "2024-12-23", "2024-12-24", "2024-12-25",
    "2024-12-26", "2024-12-27", "2024-12-28", "2024-12-29", "2024-12-30",
    "2024-12-31"
]

output_file = "flights_data_December_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""JAN 2025"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2025-01-01", "2025-01-02", "2025-01-03", "2025-01-04", "2025-01-05",
    "2025-01-06", "2025-01-07", "2025-01-08", "2025-01-09", "2025-01-10",
    "2025-01-11", "2025-01-12", "2025-01-13", "2025-01-14", "2025-01-15",
    "2025-01-16", "2025-01-17", "2025-01-18", "2025-01-19", "2025-01-20",
    "2025-01-21", "2025-01-22", "2025-01-23", "2025-01-24", "2025-01-25",
    "2025-01-26", "2025-01-27", "2025-01-28", "2025-01-29", "2025-01-30",
    "2025-01-31"
]

output_file = "flights_data_January_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""Feb 2025"""

import requests
import csv

base_url = "https://api.aviationstack.com/v1/"
endpoint = "flights"
access_key = "684e78cf5f12f52b655f09763085a195"

dates = [
    "2025-02-01", "2025-02-02", "2025-02-03", "2025-02-04", "2025-02-05",
    "2025-02-06", "2025-02-07", "2025-02-08", "2025-02-09", "2025-02-10",
    "2025-02-11", "2025-02-12", "2025-02-13", "2025-02-14", "2025-02-15",
    "2025-02-16", "2025-02-17", "2025-02-18", "2025-02-19", "2025-02-20",
    "2025-02-21", "2025-02-22", "2025-02-23", "2025-02-24", "2025-02-25",
    "2025-02-26", "2025-02-27", "2025-02-28"
]

output_file = "flights_data_February_100.csv"

def safe_get(dictionary, key, default="N/A"):
    return dictionary.get(key, default) if dictionary else default

headers = [
    "Flight Number", "Airline", "Aircraft IATA", "Aircraft ICAO",
    "Departure Airport", "Scheduled Departure", "Estimated Departure",
    "Actual Departure", "Departure Terminal", "Departure Gate", "Departure Delay",
    "Arrival Airport", "Scheduled Arrival", "Estimated Arrival",
    "Actual Arrival", "Arrival Terminal", "Arrival Gate", "Arrival Delay",
    "Flight Status"
]

with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["Date"] + headers)

    for specific_date in dates:
        print(f"\nFetching data for {specific_date}")
        params = {
            'access_key': access_key,
            'dep_iata': 'DUB',
            'limit': 100,
            'flight_date': specific_date
        }

        response = requests.get(base_url + endpoint, params=params)

        if response.status_code == 200:
            data = response.json()
            for flight in data.get('data', []):
                row = [
                    safe_get(flight.get('flight'), 'iata'),
                    safe_get(flight.get('airline'), 'name'),
                    safe_get(flight.get('aircraft'), 'iata'),
                    safe_get(flight.get('aircraft'), 'icao'),
                    safe_get(flight.get('departure'), 'airport'),
                    safe_get(flight.get('departure'), 'scheduled'),
                    safe_get(flight.get('departure'), 'estimated'),
                    safe_get(flight.get('departure'), 'actual'),
                    safe_get(flight.get('departure'), 'terminal'),
                    safe_get(flight.get('departure'), 'gate'),
                    safe_get(flight.get('departure'), 'delay'),
                    safe_get(flight.get('arrival'), 'airport'),
                    safe_get(flight.get('arrival'), 'scheduled'),
                    safe_get(flight.get('arrival'), 'estimated'),
                    safe_get(flight.get('arrival'), 'actual'),
                    safe_get(flight.get('arrival'), 'terminal'),
                    safe_get(flight.get('arrival'), 'gate'),
                    safe_get(flight.get('arrival'), 'delay'),
                    safe_get(flight, 'flight_status')
                ]
                writer.writerow([specific_date] + row)
        else:
            print(f"Error: {response.status_code}, {response.text}")

print(f"\nFlight data saved to {output_file}")

"""Join them all together

# JOINING THEM ALL TOGETHER
"""

import os
import pandas as pd

folder_path = "/content/drive/MyDrive/Final Year Project/Data/Complete Flights"
output_file = os.path.join(folder_path, "flights_completed.csv") # joined all the csv files

csv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')] # list of all csv files in the folder

dataframes = [pd.read_csv(os.path.join(folder_path, file)) for file in csv_files] # read each csv file and store in a list

merged_df = pd.concat(dataframes, ignore_index=True) # joined all the csv files

merged_df.to_csv(output_file, index=False) # saved them all into fligths completed

print(f"Merged CSV saved as: {output_file}")

"""# EDA AND PREPROCESSING"""

import pandas as pd
import os
os.chdir('/content/drive/MyDrive/Final Year Project/Data/Complete Flights')
flights_df = pd.read_csv('flights_completed.csv')

len(flights_df)

flights_df.shape

flights_df.isnull().any() # finding out which columns have N/A values

flights_df.isnull().sum() # computing the amount of null values per column

#drop specific columns regarding arrival spots
flights_df = flights_df.drop(columns=["Aircraft ICAO",'Arrival Delay', "Aircraft IATA", "Arrival Gate", "Arrival Terminal",'Flight Status', 'Registration'], errors='ignore')

airline_aircraft_mapping = {     # mapping a the most common aircraft leaving Dublin Airport from each airline
                                  # this was done due to some inconsistencies in the retrieved dataset.
    "Aer Lingus": "A320",
    "Air Canada": "A330",
    "Air France": "A320",
    "American Airlines": "B787",
    "ANA": "B787",
    "British Airways": "A320",
    "Delta Air Lines": "B767",
    "DHL Air": "B757",
    "Emirates": "B777",
    "Etihad Airways": "B787",
    "FedEx": "B767",
    "Iberia": "A320",
    "JetBlue Airways": "A320",
    "KLM": "B737",
    "Lufthansa": "A320",
    "Norwegian": "B737",
    "Qantas": "B787",
    "Qatar Airways": "A350",
    "Ryanair": "B737",
    "SAS": "A320",
    "Singapore Airlines": "B777",
    "Swiss": "A320",
    "TAP Air Portugal": "A321",
    "Turkish Airlines": "B737",
    "United Airlines": "B787",
    "UPS Airlines": "B747",
    "Virgin Atlantic": "B787",
    "Wizz Air": "A321",
    "Xiamen Airlines": "B737",
    "Kenya Airways": "B737",
    "China Eastern Airlines": "A320"
}

# Update the 'Aircraft Model' column based on airline mapping found
flights_df['Aircraft Model'] = flights_df['Airline'].map(airline_aircraft_mapping)

# Count the number of null values for each airline
if 'Airline' in flights_df.columns:
    null_values_per_airline = flights_df.groupby('Airline').apply(lambda x: x.isna().sum().sum())

                                                                                                          # Convert to DataFrame for better visualization
    null_values_per_airline = null_values_per_airline.to_frame(name="Total Null Values").reset_index()

                                                                                                           # Sorting  values in descending order
    null_values_per_airline_sorted = null_values_per_airline.sort_values(by="Total Null Values", ascending=False)


if 'Airline' in flights_df.columns:
    print(null_values_per_airline_sorted)
else:
    print("The column 'Airline' does not exist in flights_df. Please check your dataset.")

# Impute missing values in Departure Gate and Departure Terminal
if 'Departure Gate' in flights_df.columns and 'Departure Terminal' in flights_df.columns:
    # find mode for each column
    departure_gate_mode = flights_df['Departure Gate'].mode()[0] if not flights_df['Departure Gate'].mode().empty else None
    arrival_gate_mode = flights_df['Departure Terminal'].mode()[0] if not flights_df['Departure Terminal'].mode().empty else None

    # Impute only where values are currently null
    flights_df.loc[flights_df['Departure Gate'].isna(), 'Departure Gate'] = departure_gate_mode
    flights_df.loc[flights_df['Departure Terminal'].isna(), 'Departure Terminal'] = arrival_gate_mode

# Getting unique aircraft models in the dataset
unique_aircraft_types = flights_df['Aircraft Model'].unique()
print(unique_aircraft_types)

# Defining aircraft size category
aircraft_size_numeric_mapping = {
    "A320": 1,
    "B737": 1,
    "A321": 1,
    "B757": 2,
    "B767": 3,
    "A330": 3,
    "B787": 3,
    "A350": 3,
    "B777": 3,
    "B747": 4
}

# Creating a new column with numeric values
flights_df['Aircraft Size'] = flights_df['Aircraft Model'].map(aircraft_size_numeric_mapping)
# 1 - Small, 2 - Medium, 3 - Large, 4 - Extra Large

import numpy as np

# Creating the binary target variable: 1 if delay > 15 minutes, if not 0
flights_df['Delayed'] = np.where(flights_df['Departure Delay'] > 15, 1, 0)

# Converting Scheduled and Actual Departure times to datetime format
flights_df['Scheduled Departure'] = pd.to_datetime(flights_df['Scheduled Departure'], errors='coerce')
flights_df['Actual Departure'] = pd.to_datetime(flights_df['Actual Departure'], errors='coerce')

# Calculate Departure Delay only for rows that currenlty dont have a delay calculated
flights_df.loc[flights_df['Departure Delay'].isna(), 'Departure Delay'] = (
    flights_df['Actual Departure'] - flights_df['Scheduled Departure']
).dt.total_seconds() / 60

# Remove flights where Aircraft Model and Arrival Airport is missing (NaN)
flights_df = flights_df.dropna(subset=['Aircraft Model', 'Arrival Airport'])

# Reset the index after removing rows to fix it
flights_df.reset_index(drop=True, inplace=True)

# Remove rows where Actual Departure and Airline is null
flights_df = flights_df.dropna(subset=['Actual Departure', 'Airline'])

import pandas as pd

# Convert columns to datetime
flights_df['Estimated Departure'] = pd.to_datetime(flights_df['Estimated Departure'])
flights_df['Estimated Arrival'] = pd.to_datetime(flights_df['Estimated Arrival'])

# Calculate flight duration
flights_df['Flight Duration'] = flights_df['Estimated Arrival'] - flights_df['Estimated Departure']

# Convert duration to hours and minutes to use for analysis
flights_df['Flight Duration (Hours)'] = flights_df['Flight Duration'].dt.total_seconds() / 3600
flights_df['Flight Duration (Minutes)'] = flights_df['Flight Duration'].dt.total_seconds() / 60


# THIS ADD THE COLUMN FOR THE FLIGHT LENGTH IN HOURS AND MINUTES

os.chdir('/content/drive/MyDrive/Final Year Project/Data/Complete Flights')

processed_filename = "df2.csv" #stores this dataset into df2
flights_df.to_csv(processed_filename, index=False)

"""# Feature Engineering

"""

import pandas as pd
import os

os.chdir('/content/drive/MyDrive/Final Year Project/Data/Complete Flights')

df2 = pd.read_csv('df2.csv') # Load the dataset back in for feature engineering

# Convert 'Scheduled Departure' to datetime format
df2['Scheduled Departure'] = pd.to_datetime(df2['Scheduled Departure'])

# Extract departure time and date for feature engineering
df2['departure_time'] = df2['Scheduled Departure'].dt.time
df2['departure_date'] = df2['Scheduled Departure'].dt.date

# Peak Hour Indicator
def is_peak_hour(time):
    """Returns 1 if time is within peak hours (6-9 AM or 4-7 PM), otherwise 0"""
    return 1 if ((time >= pd.to_datetime('06:00', format='%H:%M').time() and time <= pd.to_datetime('09:00', format='%H:%M').time()) or
                 (time >= pd.to_datetime('16:00', format='%H:%M').time() and time <= pd.to_datetime('19:00', format='%H:%M').time())) else 0

df2['peak_hour'] = df2['departure_time'].apply(is_peak_hour)

# Busiest Day Indicator
# busiest days: Friday, Sunday, Monday
busiest_days = [4, 6, 0]  # Friday (4), Sunday (6), Monday (0)

df2['busiest_day'] = pd.to_datetime(df2['departure_date']).dt.dayofweek.apply(lambda x: 1 if x in busiest_days else 0)

# Peak Season Indicator
# peak season months: June (6), July (7), August (8), September (9), October (10)
peak_season_months = [6, 7, 8, 9, 10]

df2['peak_season'] = pd.to_datetime(df2['de parture_date']).dt.month.apply(lambda x: 1 if x in peak_season_months else 0)

# Save the modified dataset
df2.to_csv("processed_df2.csv", index=False)

processed_filename = "Flight_to_ml.csv" # save the final dataset for fligths to this for joining purposes
df2.to_csv(processed_filename, index=False)